// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class currentTermsApproved extends ethereum.Event {
  get params(): currentTermsApproved__Params {
    return new currentTermsApproved__Params(this);
  }
}

export class currentTermsApproved__Params {
  _event: currentTermsApproved;

  constructor(event: currentTermsApproved) {
    this._event = event;
  }

  get approvedBidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class newBidSent extends ethereum.Event {
  get params(): newBidSent__Params {
    return new newBidSent__Params(this);
  }
}

export class newBidSent__Params {
  _event: newBidSent;

  constructor(event: newBidSent) {
    this._event = event;
  }

  get Bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timelines(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get budgets(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class ProjectNegotiationTracker__loadBidderTermsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class ProjectNegotiationTracker__loadOwnerTermsResult {
  value0: string;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(value0: string, value1: Array<BigInt>, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }
}

export class ProjectNegotiationTracker extends ethereum.SmartContract {
  static bind(address: Address): ProjectNegotiationTracker {
    return new ProjectNegotiationTracker("ProjectNegotiationTracker", address);
  }

  BidderProposalStatus(param0: Address): boolean {
    let result = super.call(
      "BidderProposalStatus",
      "BidderProposalStatus(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_BidderProposalStatus(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "BidderProposalStatus",
      "BidderProposalStatus(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  BidderToBudgets(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "BidderToBudgets",
      "BidderToBudgets(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_BidderToBudgets(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BidderToBudgets",
      "BidderToBudgets(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BidderToTimeline(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "BidderToTimeline",
      "BidderToTimeline(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_BidderToTimeline(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BidderToTimeline",
      "BidderToTimeline(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  all_bidders(param0: BigInt): Address {
    let result = super.call("all_bidders", "all_bidders(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_all_bidders(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "all_bidders",
      "all_bidders(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  budgetsOwner(param0: BigInt): BigInt {
    let result = super.call("budgetsOwner", "budgetsOwner(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_budgetsOwner(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "budgetsOwner",
      "budgetsOwner(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllBidderAddresses(): Array<Address> {
    let result = super.call(
      "getAllBidderAddresses",
      "getAllBidderAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllBidderAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllBidderAddresses",
      "getAllBidderAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  hashURI(): string {
    let result = super.call("hashURI", "hashURI():(string)", []);

    return result[0].toString();
  }

  try_hashURI(): ethereum.CallResult<string> {
    let result = super.tryCall("hashURI", "hashURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  loadBidderTerms(
    _bidder: Address
  ): ProjectNegotiationTracker__loadBidderTermsResult {
    let result = super.call(
      "loadBidderTerms",
      "loadBidderTerms(address):(uint256[],uint256[])",
      [ethereum.Value.fromAddress(_bidder)]
    );

    return new ProjectNegotiationTracker__loadBidderTermsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_loadBidderTerms(
    _bidder: Address
  ): ethereum.CallResult<ProjectNegotiationTracker__loadBidderTermsResult> {
    let result = super.tryCall(
      "loadBidderTerms",
      "loadBidderTerms(address):(uint256[],uint256[])",
      [ethereum.Value.fromAddress(_bidder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectNegotiationTracker__loadBidderTermsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  loadOwnerTerms(): ProjectNegotiationTracker__loadOwnerTermsResult {
    let result = super.call(
      "loadOwnerTerms",
      "loadOwnerTerms():(string,uint256[],uint256[])",
      []
    );

    return new ProjectNegotiationTracker__loadOwnerTermsResult(
      result[0].toString(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_loadOwnerTerms(): ethereum.CallResult<
    ProjectNegotiationTracker__loadOwnerTermsResult
  > {
    let result = super.tryCall(
      "loadOwnerTerms",
      "loadOwnerTerms():(string,uint256[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectNegotiationTracker__loadOwnerTermsResult(
        value[0].toString(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }

  milestones(): string {
    let result = super.call("milestones", "milestones():(string)", []);

    return result[0].toString();
  }

  try_milestones(): ethereum.CallResult<string> {
    let result = super.tryCall("milestones", "milestones():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerApproval(): boolean {
    let result = super.call("ownerApproval", "ownerApproval():(bool)", []);

    return result[0].toBoolean();
  }

  try_ownerApproval(): ethereum.CallResult<boolean> {
    let result = super.tryCall("ownerApproval", "ownerApproval():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  projectName(): string {
    let result = super.call("projectName", "projectName():(string)", []);

    return result[0].toString();
  }

  try_projectName(): ethereum.CallResult<string> {
    let result = super.tryCall("projectName", "projectName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timelinesOwner(param0: BigInt): BigInt {
    let result = super.call(
      "timelinesOwner",
      "timelinesOwner(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_timelinesOwner(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelinesOwner",
      "timelinesOwner(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winningBidder(): Address {
    let result = super.call("winningBidder", "winningBidder():(address)", []);

    return result[0].toAddress();
  }

  try_winningBidder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "winningBidder",
      "winningBidder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _HolderFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _TokenFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _milestones(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _timelines(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get _budgets(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveBidderTermsCall extends ethereum.Call {
  get inputs(): ApproveBidderTermsCall__Inputs {
    return new ApproveBidderTermsCall__Inputs(this);
  }

  get outputs(): ApproveBidderTermsCall__Outputs {
    return new ApproveBidderTermsCall__Outputs(this);
  }
}

export class ApproveBidderTermsCall__Inputs {
  _call: ApproveBidderTermsCall;

  constructor(call: ApproveBidderTermsCall) {
    this._call = call;
  }

  get _bidder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _CTaddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ERC20address(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get auditor(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get IPFShash(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class ApproveBidderTermsCall__Outputs {
  _call: ApproveBidderTermsCall;

  constructor(call: ApproveBidderTermsCall) {
    this._call = call;
  }
}

export class NewBidderTermsCall extends ethereum.Call {
  get inputs(): NewBidderTermsCall__Inputs {
    return new NewBidderTermsCall__Inputs(this);
  }

  get outputs(): NewBidderTermsCall__Outputs {
    return new NewBidderTermsCall__Outputs(this);
  }
}

export class NewBidderTermsCall__Inputs {
  _call: NewBidderTermsCall;

  constructor(call: NewBidderTermsCall) {
    this._call = call;
  }

  get _timelines(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _budgets(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class NewBidderTermsCall__Outputs {
  _call: NewBidderTermsCall;

  constructor(call: NewBidderTermsCall) {
    this._call = call;
  }
}
